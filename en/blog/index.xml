<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on agsolutions - Alexander Josef Gassner, M.Sc. - Software Engineering &amp; IT Consulting</title><link>https://agsolutions.at/en/blog/</link><description>Recent content in Blog on agsolutions - Alexander Josef Gassner, M.Sc. - Software Engineering &amp; IT Consulting</description><language>en</language><lastBuildDate>Thu, 13 Feb 2020 16:21:44 +0100</lastBuildDate><atom:link href="https://agsolutions.at/en/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Printing issues with Possy</title><link>https://agsolutions.at/en/blog/printing-issues-with-possy/</link><pubDate>Thu, 13 Feb 2020 16:21:44 +0100</pubDate><guid>https://agsolutions.at/en/blog/printing-issues-with-possy/</guid><description>&lt;p>Tired of writing tasks by hand? - In this article I want to introduce Possy, a tool to print cards
with POS printers for physical task boards with data provided by issue tracking systems, e.g. Atlassian Jira.&lt;/p>
&lt;video controls>
&lt;source src="https://agsolutions.at/en/blog/printing-issues-with-possy/possy.mp4" type="video/mp4">
Ihr browser unterstützt keine Videos.
&lt;/video>
&lt;blockquote>
&lt;p>Physical task boards are typically encountered in software development teams who use an
Agile method like Scrum or Kanban as their process model. These task boards help to visualize
the advance in development. Quite often there is the requirement to maintain the state
of physical task boards in digital issue tracking systems, e.g. Jira or GitLab. In this case
a considerable eff�ort accrues, because the state of the development progress has to be maintained
on the physical task board and on the issue tracking system.&lt;/p>
&lt;/blockquote>
&lt;figure>
&lt;img src="possy-board.jpg"
alt="Possy Agile Board"/> &lt;figcaption>
&lt;p>Example of Possy-printed Agile Board&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>You could simply avoid using physical boards and manage the issues with a single digital instance without the need
to sync any state. But here are some advantages of physical boards, so you probably want to use them in conjunction
with an issue tracker:&lt;/p>
&lt;ul>
&lt;li>A physical place where the team members meet&lt;/li>
&lt;li>Physical board motivates the team to gather, discuss and collaborate&lt;/li>
&lt;li>Face-to-face contact improves communication and engagement among team members&lt;/li>
&lt;li>Better communication leads to more efficiency, ownership, better products and less unwanted delays&lt;/li>
&lt;/ul>
&lt;p>So we need some tooling here to make our lives easier and that&amp;rsquo;s why I want to introduce Possy to you.&lt;/p>
&lt;h3 id="possy">Possy&lt;/h3>
&lt;p>Possy is intended to be used as addition for physical Scrum and Kanban boards. It&amp;rsquo;s a simple web interface to
automate the creation of print-cards which are typically used on physical boards.&lt;/p>
&lt;p>Usually you have to sign in on your ticket system. Then you have to find the desired issue and finally you have to
write some text on e.g. Post-it® by hand. In total this steps can be very time consuming.&lt;/p>
&lt;p>Possy automates this process by letting the user choose the tasks to be printed in its simple web interface.
The UI part is connected to an issue tracking system like GitHub or Atlassian Jira. Possy prints the selected
issues with one of the connected POS printers. Why POS printers? - Simply because they print on thermal
paper. Thermal paper is quite cheap, usually cheaper than conventional sticky notes.&lt;/p>
&lt;p>The idea behind Possy comes from my colleagues &lt;a href="https://github.com/boris779">Boris&lt;/a> and
&lt;a href="https://github.com/gerald24">Gerald&lt;/a>. A first prototype was born some time ago, after some months I joined the OSS
project as contributor. Currently we work on different features and improvements, there are many ideas to extend the
functionality of Possy. Have a look on GitHub for the current status of the project.&lt;/p>
&lt;a class="button" href="https://github.com/gerald24/possy" title="Possy on GitHub">
&lt;i class="fa fa-github" aria-hidden="true">&lt;/i>
Possy on GitHub
&lt;/a>
&lt;p>There is also a demo instance running on Heroku:&lt;/p>
&lt;a class="button" href="https://github.com/gerald24/possy#demo" title="Possy demo on Heroku">
&lt;i class="fa fa-rocket" aria-hidden="true">&lt;/i>
Possy demo on Heroku
&lt;/a>
&lt;p>Following image illustrates a Possy-printed User Story. As you can see the quality is quite nice for a POS-printed document
(printed with an Epson TM-T20II printer).&lt;/p>
&lt;p>&lt;img src="cover.jpg" alt="Possy Story Issue">&lt;/p>
&lt;h3 id="architecture">Architecture&lt;/h3>
&lt;p>There are two main modules, Possy Service and Possy Daemon. Possy Service serves the user interface made with Vaadin (&lt;a href="https://vaadin.com">https://vaadin.com&lt;/a>)
and is responsible for communication with the issue tracking systems. The Service creates print jobs which are consumed by the Daemon.
Possy Daemon is connected with some POS printers via CUPS. Multiple connected POS printers are supported to enable
prints with different colors. The JVM-based language Kotlin (&lt;a href="https://kotlinlang.org/">https://kotlinlang.org/&lt;/a>) is used for the whole project.&lt;/p>
&lt;p>We have two different networks in our production environment. Members in network A are not able to talk with members of
network B, but vice versa. The requirement was to serve the user interface via network A. If Possy would be a monolithic
application which runs in network A there is no chance to talk with the printers in network B. So we decided to split Possy
into two modules. The Daemon in network B fetches print jobs from the Service in network A.&lt;/p>
&lt;p>&lt;img src="possy-architecture.png" alt="Possy Architecture">&lt;/p>
&lt;p>Possy Daemon is a very small and lightweight application. Therefor it&amp;rsquo;s perfectly clear to run the Deamon on a small
and handy device like a Raspberry Pi.&lt;/p>
&lt;h3 id="planner">Planner&lt;/h3>
&lt;p>Possy includes a very convenient feature called Planner. Mostly it&amp;rsquo;s used during Planning II meetings to create Story sub-tasks.
All tasks for multiple Stories can be defined directly in Possy&amp;rsquo;s user interface and with one click all tasks get printed in order.&lt;/p>
&lt;p>As we have no distributed team we aren&amp;rsquo;t managing sub-tasks of Stories with Jira. This much faster and more flexible to do with Possy Planner.
There is no need to manage the sub-task state both in Jira and on the board. Of course this approach has some downsides when working remotely,
because the physical board is not visible then. But we have the vision to capture continuous snapshots of the physical board with an camera
attached to Possy. Feel free to open a pull request for this feature 😏&lt;/p>
&lt;p>&lt;img src="planner.png" alt="Possy Planner">&lt;/p>
&lt;p>If you have any feedback or if there are some features missing feel free to open an issue on GitHub:
&lt;a href="https://github.com/gerald24/possy/issues">https://github.com/gerald24/possy/issues&lt;/a>&lt;/p></description><enclosure url="https://agsolutions.at/en/blog/printing-issues-with-possy/cover_huc410300e956b91907a41e009b4d53c45_138638_800x0_resize_q75_box.jpg" length="0" type="image/jpeg"/></item></channel></rss>